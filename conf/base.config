/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/funcscan Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus          = { 1 * task.attempt }
    memory        = { 6.GB * task.attempt }
    time          = { 4.h * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withLabel: process_single {
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_low {
        cpus   = { 2 * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_medium {
        cpus   = { 6 * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h * task.attempt }
    }
    withLabel: process_high {
        cpus   = { 12 * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h * task.attempt }
    }
    withLabel: process_long {
        time = { 20.h * task.attempt }
    }
    withLabel: process_high_memory {
        memory = { 200.GB * task.attempt }
    }
    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    /*
    * Resource specifications
    */

    withName: GUNZIP {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: UNTAR {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: PROKKA {
        memory = { check_max(8.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
        time   = { check_max(8.h * task.attempt, 'time') }
    }

    withName: PRODIGAL_GBK {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: BAKTA_BAKTA {
        memory = { check_max(64.GB * task.attempt, 'memory') }
        cpus   = { check_max(8 * task.attempt, 'cpus') }
        time   = { check_max(8.h * task.attempt, 'time') }
    }

    withName: ABRICATE_RUN {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
    }

    withName: AMRFINDERPLUS_RUN {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: DEEPARG_DOWNLOADDATA {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
        time   = { check_max(2.h * task.attempt, 'time') }
    }

    withName: DEEPARG_PREDICT {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: FARGENE {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
    }

    withName: RGI_MAIN {
        memory = { check_max(28.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
    }

    withName: AMPIR {
        memory = { check_max(8.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: AMPLIFY_PREDICT {
        memory = { check_max(16.GB * task.attempt, 'memory') }
        cpus   = 1
        time   = { check_max(24.h * task.attempt, 'time') }
    }

    withName: AMP_HMMER_HMMSEARCH {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
    }

    withName: MACREL_CONTIGS {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
    }

    withName: BGC_HMMER_HMMSEARCH {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
    }

    withName: ANTISMASH_ANTISMASHLITE {
        memory = { check_max(64.GB * task.attempt, 'memory') }
        cpus   = { check_max(8 * task.attempt, 'cpus') }
        time   = { check_max(12.h * task.attempt, 'time') }
    }

    withName: ANTISMASH_ANTISMASHLITEDOWNLOADDATABASES {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: DEEPBGC_DOWNLOAD {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: DEEPBGC_PIPELINE {
        memory = { check_max(2.GB * task.attempt, 'memory') }
        cpus   = 1
        time   = { check_max(24.h * task.attempt, 'time') }
    }

    withName: GECCO_RUN {
        memory = { check_max(16.GB * task.attempt, 'memory') }
        cpus   = { check_max(4 * task.attempt, 'cpus') }
    }

    withName: HAMRONIZATION_ABRICATE {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: HAMRONIZATION_AMRFINDERPLUS {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: HAMRONIZATION_DEEPARG {
        memory = { check_max(8.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: HAMRONIZATION_RGI {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: HAMRONIZATION_FARGENE {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: HAMRONIZATION_SUMMARIZE {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: ARGNORM_DEEPARG {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: ARGNORM_ABRICATE {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: ARGNORM_AMRFINDERPLUS {
        memory = { check_max(4.GB * task.attempt, 'memory') }
        cpus   = 1
    }

    withName: AMPCOMBI2_PARSETABLES {
        memory = { check_max(8.GB * task.attempt, 'memory') }
        time   = { check_max(2.h * task.attempt, 'time') }
    }

    withName: AMPCOMBI2_CLUSTER {
        memory = { check_max(6.GB * task.attempt, 'memory') }
        time   = { check_max(2.h * task.attempt, 'time') }
    }
}
